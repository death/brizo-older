/** @file text_tables.cpp \brief Brizo default disassembler's text tables */
// $Workfile: text_tables.cpp $
//
// Brizo Disassembler by DEATH, 2003-2004
//
// Disassembler formatting text tables.
//
// $Author: Death $
// $Revision: 10 $
// $Date: 11/22/04 1:54 $
//
// $NoKeywords: $
//
#include "stdafx.h"

namespace Brizo_DE20041115
{

/// Prefix text strings
extern const char *PrefixTextTable[] = {
    "LOCK",
    "REPNE",
    "REPE",
    "CS:",
    "SS:",
    "DS:",
    "ES:",
    "FS:",
    "GS:",
    "OVERRIDE_OP",
    "OVERRIDE_ADDR"
};

/// Opcode text table (with decoding mode special cases set to 16 bit mnemonics)
extern const char *OpcodeTextTable[] = {
    "ADD",
    "PUSH",
    "POP",
    "OR",
    "ADC",
    "SBB",
    "AND",
    "DAA",
    "SUB",
    "DAS",
    "XOR",
    "AAA",
    "CMP",
    "AAS",
    "INC",
    "DEC",
    "PUSHA",
    "POPA",
    "BOUND",
    "ARPL",
    "IMUL",
    "INS",
    "OUTS",
    "JO",
    "JNO",
    "JB",
    "JNB",
    "JZ",
    "JNZ",
    "JBE",
    "JNBE",
    "JS",
    "JNS",
    "JP",
    "JNP",
    "JL",
    "JNL",
    "JLE",
    "JNLE",
    "TEST",
    "XCHG",
    "MOV",
    "LEA",
    "PAUSE",
    "NOP",
    "CBW",
    "CWD",
    "CALL FAR",
    "FWAIT",
    "PUSHF",
    "POPF",
    "SAHF",
    "LAHF",
    "MOVS",
    "CMPS",
    "STOS",
    "LODS",
    "SCAS",
    "RETN",
    "LES",
    "LDS",
    "ENTER",
    "LEAVE",
    "RETF",
    "INT3",
    "INT",
    "INTO",
    "IRET",
    "AAM",
    "AAD",
    "XLAT",
//  "ESC",
    "LOOPNE",
    "LOOPE",
    "LOOP",
    "JCXZ",
    "IN",
    "OUT",
    "CALL",
    "JMP",
    "HLT",
    "CMC",
    "CLC",
    "STC",
    "CLI",
    "STI",
    "CLD",
    "STD",
    "UNKNOWN",
    "ROL",
    "ROR",
    "RCL",
    "RCR",
    "SHL",
    "SHR",
    "SAR",
    "NOT",
    "NEG",
    "MUL",
    "DIV",
    "IDIV",
    "LAR",
    "LSL",
    "CLTS",
    "INVD",
    "WBINVD",
    "UD2",
    "MOVUPS",
    "MOVSS",
    "MOVUPD",
    "MOVSD",
    "MOVLPD",
    "MOVHLPS",
    "MOVLPS",
    "UNPCKLPS",
    "UNPCKLPD",
    "UNPCKHPS",
    "UNPCKHPD",
    "MOVHPD",
    "MOVLHPS",
    "MOVHPS",
    "SLDT",
    "STR",
    "LLDT",
    "LTR",
    "VERR",
    "VERW",
    "SGDT",
    "SIDT",
    "LGDT",
    "LIDT",
    "SMSW",
    "LMSW",
    "INVLPG",
    "PREFETCHNTA",
    "PREFETCHT0",
    "PREFETCHT1",
    "PREFETCHT2",
    "MOVAPD",
    "MOVAPS",
    "CVTPI2PS",
    "CVTSI2SS",
    "CVTPI2PD",
    "CVTSI2SD",
    "MOVNTPD",
    "MOVNTPS",
    "CVTTPD2PI",
    "CVTTSS2SI",
    "CVTTSD2SI",
    "CVTTPS2PI",
    "CVTPD2PI",
    "CVTSS2SI",
    "CVTSD2SI",
    "CVTPS2PI",
    "UCOMISS",
    "UCOMISD",
    "COMISS",
    "COMISD",
    "WRMSR",
    "RDTSC",
    "RDMSR",
    "RDPMC",
    "SYSENTER",
    "SYSEXIT",
    "MOVNTI",
    "CMOVO",
    "CMOVNO",
    "CMOVB",
    "CMOVAE",
    "CMOVE",
    "CMOVNE",
    "CMOVBE",
    "CMOVA",
    "CMOVS",
    "CMOVNS",
    "CMOVP",
    "CMOVNP",
    "CMOVL",
    "CMOVNL",
    "CMOVLE",
    "CMOVNLE",
    "MOVMSKPD",
    "MOVMSKPS",
    "SQRTPS",
    "SQRTPD",
    "SQRTSS",
    "SQRTSD",
    "RSQRTPS",
    "RSQRTSS",
    "RCPPS",
    "RCPSS",
    "ANDPS",
    "ANDPD",
    "ANDNPS",
    "ANDNPD",
    "ORPS",
    "ORPD",
    "XORPS",
    "XORPD",
    "ADDPS",
    "ADDPD",
    "ADDSS",
    "ADDSD",
    "MULPS",
    "MULPD",
    "MULSS",
    "MULSD",
    "CVTPS2PD",
    "CVTSS2SD",
    "CVTPD2PS",
    "CVTSD2SS",
    "CVTPS2DQ",
    "CVTTPS2DQ",
    "CVTDQ2PS",
    "SUBPD",
    "SUBSS",
    "SUBSD",
    "SUBPS",
    "MINPD",
    "MINSS",
    "MINSD",
    "MINPS",
    "DIVPD",
    "DIVSS",
    "DIVSD",
    "DIVPS",
    "MAXPD",
    "MAXSS",
    "MAXSD",
    "MAXPS",
    "PUNPCKLBW",
    "PUNPCKLWD",
    "PUNPCKLDQ",
    "PACKSSWB",
    "PCMPGTB",
    "PCMPGTW",
    "PCMPGTD",
    "PACKUSWB",
    "PUNPCKHBW",
    "PUNPCKHWD",
    "PUNPCKHDQ",
    "PACKSSDW",
    "PUNPCKLQDQ",
    "PUNPCKHQDQ",
    "MOVD",
    "MOVDQA",
    "MOVDQU",
    "MOVQ",
    "PSHUFD",
    "PSHUFHW",
    "PSHUFLW",
    "PSHUFW",
    "PSRLW",
    "PSRAW",
    "PSLLW",
    "PSRLD",
    "PSRAD",
    "PSLLD",
    "PSRLQ",
    "PSRLDQ",
    "PSLLQ",
    "PSLLDQ",
    "PCMPEQB",
    "PCMPEQW",
    "PCMPEQD",
    "EMMS",
    "MMXUD",
    "SETO",
    "SETNO",
    "SETB",
    "SETNB",
    "SETZ",
    "SETNZ",
    "SETBE",
    "SETNBE",
    "SETS",
    "SETNS",
    "SETP",
    "SETNP",
    "SETL",
    "SETNL",
    "SETLE",
    "SETNLE",
    "CPUID",
    "BT",
    "SHLD",
    "RSM",
    "BTS",
    "SHRD",
    "FXSAVE",
    "FXRSTOR",
    "LDMXCSR",
    "STMXCSR",
    "CLFLUSH",
    "LFENCE",
    "MFENCE",
    "SFENCE",
    "CMPXCHG",
    "LSS",
    "BTR",
    "LFS",
    "LGS",
    "MOVZX",
    "BTC",
    "BSF",
    "BSR",
    "MOVSX",
    "XADD",
    "CMPSS",
    "CMPSD",
    "CMPPD",
    "CMPPS",
    "PINSRW",
    "PEXTRW",
    "SHUFPD",
    "SHUFPS",
    "CMPXCHG8B",
    "BSWAP",
    "PADDQ",
    "PMULLW",
    "MOVQ2DQ",
    "MOVDQ2Q",
    "PMOVMSKB",
    "PSUBUSB",
    "PSUBUSW",
    "PMINUB",
    "PAND",
    "PADDUSB",
    "PADDUSW",
    "PMAXUB",
    "PANDN",
    "PAVGB",
    "PAVGW",
    "PMULHUW",
    "PMULHW",
    "CVTTPD2DQ",
    "CVTDQ2PD",
    "CVTPD2DQ",
    "MOVNTDQ",
    "MOVNTQ",
    "PSUBSB",
    "PSUBSW",
    "PMINSW",
    "POR",
    "PADDSB",
    "PADDSW",
    "PMAXSW",
    "PXOR",
    "PMULUDQ",
    "PMADDWD",
    "PSADBW",
    "MASKMOVDQU",
    "MASKMOVQ",
    "PSUBB",
    "PSUBW",
    "PSUBD",
    "PSUBQ",
    "PADDB",
    "PADDW",
    "PADDD",
    // FPU Instructions
    "FADD",
    "FMUL",
    "FCOM",
    "FCOMP",
    "FSUB",
    "FSUBR",
    "FDIV",
    "FDIVR",
    "FLD",
    "FST",
    "FSTP",
    "FLDENV",
    "FLDCW",
    "FSTENV",
    "FSTCW",
    "FXCH",
    "FNOP",
    "FCHS",
    "FABS",
    "FTST",
    "FXAM",
    "FLD1",
    "FLDL2T",
    "FLDL2E",
    "FLDPI",
    "FLDLG2",
    "FLDLN2",
    "FLDZ",
    "F2XM1",
    "FYL2X",
    "FPTAN",
    "FPATAN",
    "FXTRACT",
    "FPREM1",
    "FDECSTP",
    "FINCSTP",
    "FPREM",
    "FYL2XP1",
    "FSQRT",
    "FSINCOS",
    "FRNDINT",
    "FSCALE",
    "FSIN",
    "FCOS",
    "FIADD",
    "FIMUL",
    "FICOM",
    "FICOMP",
    "FISUB",
    "FISUBR",
    "FIDIV",
    "FIDIVR",
    "FCMOVB",
    "FCMOVE",
    "FCMOVBE",
    "FCMOVU",
    "FUCOMPP",
    "FILD",
    "FIST",
    "FISTP",
    "FCMOVNB",
    "FCMOVNE",
    "FCMOVNBE",
    "FCMOVNU",
    "FCLEX",
    "FINIT",
    "FUCOMI",
    "FCOMI",
    "FRSTOR",
    "FSAVE",
    "FSTSW",
    "FFREE",
    "FUCOM",
    "FUCOMP",
    "FADDP",
    "FMULP",
    "FCOMPP",
    "FSUBRP",
    "FSUBP",
    "FDIVRP",
    "FDIVP",
    "FBLD",
    "FBSTP",
    "FUCOMIP",
    "FCOMIP",
    // SSE3
    "ADDSUBPD",
    "ADDSUBPS",
    "FISTTP",
    "HADDPD",
    "HADDPS",
    "HSUBPD",
    "HSUBPS",
    "MONITOR",
    "MWAIT",
    "LDDQU",
    "MOVDDUP",
    "MOVSHDUP",
    "MOVSLDUP"
};

/// 16-bit operand size mode registers text strings
extern const char *RegisterTextTable16[] = {
    "???",
    "AL", "AH", "AX", "EAX", "AX",
    "BL", "BH", "BX", "EBX", "BX",
    "CL", "CH", "CX", "ECX", "CX",
    "DL", "DH", "DX", "EDX", "DX",
    "SI", "ESI", "SI",
    "DI", "EDI", "DI",
    "SP", "ESP", "SP",
    "BP", "EBP", "BP",
    "CS", "DS", "ES", "FS", "GS", "SS",
    "1",
    "XMM0", "XMM1", "XMM2", "XMM3",
    "XMM4", "XMM5", "XMM6", "XMM7",
    "CR0", "CR1", "CR2", "CR3",
    "CR4", "CR5", "CR6", "CR7",
    "DR0", "DR1", "DR2", "DR3",
    "DR4", "DR5", "DR6", "DR7",
    "TR0", "TR1", "TR2", "TR3",
    "TR4", "TR5", "TR6", "TR7",
    "MM0", "MM1", "MM2", "MM3",
    "MM4", "MM5", "MM6", "MM7",
    // FPU stack operands
    "ST(0)",
    "ST(1)",
    "ST(2)",
    "ST(3)",
    "ST(4)",
    "ST(5)",
    "ST(6)",
    "ST(7)"
};

/// 32-bit operand size mode registers text strings
extern const char *RegisterTextTable32[] = {
    "???",
    "AL", "AH", "AX", "EAX", "EAX",
    "BL", "BH", "BX", "EBX", "EBX",
    "CL", "CH", "CX", "ECX", "ECX",
    "DL", "DH", "DX", "EDX", "EDX",
    "SI", "ESI", "ESI",
    "DI", "EDI", "EDI",
    "SP", "ESP", "ESP",
    "BP", "EBP", "EBP",
    "CS", "DS", "ES", "FS", "GS", "SS",
    "1",
    "XMM0", "XMM1", "XMM2", "XMM3",
    "XMM4", "XMM5", "XMM6", "XMM7",
    "CR0", "CR1", "CR2", "CR3",
    "CR4", "CR5", "CR6", "CR7",
    "DR0", "DR1", "DR2", "DR3",
    "DR4", "DR5", "DR6", "DR7",
    "TR0", "TR1", "TR2", "TR3",
    "TR4", "TR5", "TR6", "TR7",
    "MM0", "MM1", "MM2", "MM3",
    "MM4", "MM5", "MM6", "MM7",
    // FPU stack operands
    "ST(0)",
    "ST(1)",
    "ST(2)",
    "ST(3)",
    "ST(4)",
    "ST(5)",
    "ST(6)",
    "ST(7)"
};

/// Memory addressing type 1 text strings
extern const char *MemAddr1TextTable[] = {
    "[BX+SI]",
    "[BX+DI]",
    "[BP+SI]",
    "[BP+DI]",
    "[SI]",
    "[DI]",
    "???",
    "[BX]",
    "[EAX]",
    "[ECX]",
    "[EDX]",
    "[EBX]",
    "???",
    "???",
    "[ESI]",
    "[EDI]"
};

/// Memory addressing type 2 text strings
extern const char *MemAddr2TextTable[] = {
    "[BX+SI%s]",
    "[BX+DI%s]",
    "[BP+SI%s]",
    "[BP+DI%s]",
    "[SI%s]",
    "[DI%s]",
    "[BP%s]",
    "[BX%s]",
    "[EAX%s]",
    "[ECX%s]",
    "[EDX%s]",
    "[EBX%s]",
    "[???%s]",
    "[EBP%s]",
    "[ESI%s]",
    "[EDI%s]"
};

/// Memory addressing type 3 text strings
extern const char *MemAddr3TextTable[] = {
    "[BX+SI%s]",
    "[BX+DI%s]",
    "[BP+SI%s]",
    "[BP+DI%s]",
    "[SI%s]",
    "[DI%s]",
    "[BP%s]",
    "[BX%s]",
    "[EAX%s]",
    "[ECX%s]",
    "[EDX%s]",
    "[EBX%s]",
    "[???%s]",
    "[EBP%s]",
    "[ESI%s]",
    "[EDI%s]"
};

}
